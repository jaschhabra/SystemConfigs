#!/usr/bin/env ruby

# Changelog:
# - added zip support
# - added support for cmd-line list of bundles to update

git_bundles = [ 
  "https://github.com/mileszs/ack.vim.git",
  "https://github.com/tsaleh/vim-align.git",
  "https://github.com/tpope/vim-cucumber.git",
  "https://github.com/astashov/vim-ruby-debugger.git",
  #"https://github.com/msanders/snipmate.vim.git",
  "https://github.com/tpope/vim-fugitive.git",
  "https://github.com/clones/vim-fuzzyfinder.git",
  "https://github.com/tpope/vim-git.git",
  "https://github.com/borgand/ir_black.git",
  "https://github.com/pangloss/vim-javascript.git",
  "https://github.com/hallettj/jslint.vim.git",
  "https://github.com/Shougo/neocomplcache.git",
  "https://github.com/scrooloose/nerdtree.git",
  "https://github.com/tpope/vim-rails.git",
  "https://github.com/jpo/vim-railscasts-theme.git",
  #"https://github.com/tpope/vim-repeat.git",
  "https://github.com/vim-ruby/vim-ruby.git",
  "https://github.com/janx/vim-rubytest.git",
  "https://github.com/taq/vim-rspec.git",
 # "https://github.com/tsaleh/vim-shoulda.git",
  "https://github.com/msanders/snipmate.vim.git",
  "https://github.com/tsaleh/vim-supertab.git",
  "https://github.com/tpope/vim-surround.git",
  "https://github.com/tsaleh/vim-tcomment.git",
  "https://github.com/tpope/vim-vividchalk.git",
  "https://github.com/vim-scripts/taglist.vim.git",
  "https://github.com/tpope/vim-haml.git"
  # "git://git.wincent.com/command-t.git",
]

vim_org_scripts = [
  ["IndexedSearch", "7062",  "plugin"],
  ["jquery",        "12107", "syntax"],
  ["l9", "13948", "zip"],
  ["minibufexpl",   "3640",   "plugin"],
  ["vcscommand",    "12743", "zip"],
]

vim_other_scripts = [
        ["Conque", "http://conque.googlecode.com/files/conque_2.1.vba", "vba"]
]
require 'fileutils'
require 'open-uri'

bundles_dir = File.join(File.dirname(__FILE__), "bundle")

FileUtils.cd(bundles_dir)

# If ARGV is not empty, work only on listed bundles
def should_update(b)
  return ARGV.empty? || (ARGV.include?(b))
end


puts "Trashing #{ARGV.empty? ? 'everything' : ARGV.join(',')} (lookout!)"
Dir["*"].each {|d| FileUtils.rm_rf d if should_update d}

git_bundles.each do |url|
  dir = url.split('/').last.sub(/\.git$/, '')
  next unless should_update dir
  puts "  Unpacking #{url} into #{dir}"
  `git clone #{url} #{dir}`
  FileUtils.rm_rf(File.join(dir, ".git"))
end

vim_org_scripts.each do |name, script_id, script_type|
  next unless should_update name
  puts "  Downloading #{name}"
  local_file = File.join(name, script_type, "#{name}.#{script_type != ('zip'|| 'vba') ? 'vim' : script_type}")
  FileUtils.mkdir_p(File.dirname(local_file))
  File.open(local_file, "w") do |file|
    file << open("http://www.vim.org/scripts/download_script.php?src_id=#{script_id}").read
  end
  if script_type == 'zip'
    %x(unzip -d #{name} #{local_file})
  end
  if script_type == 'vba'
	%x{ xterm -e vim -c 'so % | q' #{local_file}; rm -f #{local_file} &}
  end
end


vim_other_scripts.each do |name, url, script_type|
  next unless should_update name
  puts "  Downloading #{name}"
  local_file = File.join(name, script_type, "#{name}.#{script_type != ('zip'|| 'vba') ? 'vim' : script_type}")
  FileUtils.mkdir_p(File.dirname(local_file))
  File.open(local_file, "w") do |file|
    file << open(url).read
  end
  if script_type == 'zip'
    %x(unzip -d #{name} #{local_file})
  end
  if script_type == 'vba'
	%x{ xterm -e vim -c 'so % | q' #{local_file}; rm -f #{local_file} &}
  end
end

# Special handeling for command-t
#  if should_update "command-t"
#    FileUtils.cd("command-t")
#    %x{xterm -e rake make | less}
#  end
